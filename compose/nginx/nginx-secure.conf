user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

server {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    proxy_headers_hash_bucket_size  52;

    gzip  on;

    upstream app {
        server devpi:3141;
    }

    server {
      server_name localhost $hostname "";   
      listen 80;
      gzip             on;
      gzip_min_length  2000;
      gzip_proxied     any;
      gzip_types       text/html application/json; 

      proxy_read_timeout 60s;
      client_max_body_size 64M;

      # set to where your devpi-server state is on the filesystem
      root /data/server;  
      
      # this redirects to the login view when not logged in
      error_page 401 = @error401;
      location @error401 {
          return 302 /+login;
      }

      # the location to check whether the provided infos authenticate the user
      location = /+authcheck {
          internal;

          proxy_pass_request_body off;
          proxy_set_header Content-Length "";
          proxy_set_header X-Original-URI $request_uri;
          proxy_set_header X-outside-url $scheme://$host;
          @pre_proxy_to_app;
      }

      # lock down everything by default
      auth_request /+authcheck;

      # pass on /+login without authentication check to allow login
      location = /+login {
          auth_request off;
          proxy_set_header X-outside-url $scheme://$host;
          @pre_proxy_to_app;
      }

      # pass on /+api without authentication check for URL endpoint discovery
      location ~ /\+api$ {
          auth_request off;
          proxy_set_header X-outside-url $scheme://$host;
          @pre_proxy_to_app;
      }

      # pass on /+static without authentication check for browser access to css etc
      location /+static/ {
          auth_request off;
          proxy_set_header X-outside-url $scheme://$host;
          @pre_proxy_to_app;
      }

      # use auth_request to lock down all the rest
      location / {
          proxy_set_header X-outside-url $scheme://$host;
          @pre_proxy_to_app;
      }

      # try serving static files directly
      location ~ /\+f/ {
          # workaround to pass non-GET/HEAD requests through to the named location below
          error_page 418 = @proxy_to_app;
          if ($request_method !~ (GET)|(HEAD)) {
              return 418; 
          }

          expires max;
          try_files /+files$uri @proxy_to_app;
      }
      # try serving docs directly
      location ~ /\+doc/ {
          try_files $uri @proxy_to_app;
      }
      location @pre_proxy_to_app {
          # workaround to pass all requests to / through to the named location below
          error_page 418 = @proxy_to_app;
          return 418;
      }
      location @proxy_to_app {
          proxy_pass http://localhost:3141;
          proxy_set_header X-outside-url $scheme://$host:$server_port;
          proxy_set_header X-Real-IP $remote_addr;
          expires -1;  # no-cache
      }
    } 

    server {
        listen 80;
        server_name ___my.example.com___ www.___my.example.com___;

        location /.well-known/acme-challenge {
            # Since the certbot container isn't up constantly, need to resolve ip dynamically using docker's dns
            resolver ___NAMESERVER___;
            set $certbot_addr_port certbot:80;
            proxy_pass http://$certbot_addr_port;
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            return         301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443;
        server_name ___my.example.com___ www.___my.example.com___;

        ssl on;
        ssl_certificate /etc/letsencrypt/live/___my.example.com___/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/___my.example.com___/privkey.pem;
        ssl_session_timeout 5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_prefer_server_ciphers on;

        ssl_session_cache shared:SSL:10m;
        ssl_dhparam /etc/ssl/private/dhparams.pem;

        location /.well-known/acme-challenge {
            resolver ___NAMESERVER___;
            set $certbot_addr_port certbot:443;
            proxy_pass http://$certbot_addr_port;
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto https;
        }

        location / {
            # checks for static file, if not found proxy to app
            try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass   http://app;
        }
    }
}
